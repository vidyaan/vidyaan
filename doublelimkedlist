// Class to represent a node of the doubly linked list
class Node {
    int data; // Data of the node
    Node next; // Reference to the next node
    Node prev; // Reference to the previous node

    // Constructor to initialize a node
    public Node(int data) {
        this.data = data;
        this.next = null;
        this.prev = null;
    }
}

// Class to represent the doubly linked list
class DoublyLinkedList {
    Node head; // Head node of the doubly linked list

    // Constructor to initialize an empty doubly linked list
    public DoublyLinkedList() {
        this.head = null;
    }

    // Method to add a node at the end of the list
    public void append(int data) {
        Node newNode = new Node(data);

        if (head == null) {
            head = newNode;
            return;
        }

        Node temp = head;
        while (temp.next != null) {
            temp = temp.next;
        }

        temp.next = newNode; // Link the last node to the new node
        newNode.prev = temp; // Set the previous of the new node to the last node
    }

    // Method to add a node at the beginning of the list
    public void prepend(int data) {
        Node newNode = new Node(data);

        if (head == null) {
            head = newNode;
            return;
        }

        newNode.next = head; // Set the new node's next to the current head
        head.prev = newNode; // Set the current head's previous to the new node
        head = newNode; // Move the head to the new node
    }

    // Method to delete a node with specific value
    public void delete(int data) {
        if (head == null) {
            System.out.println("List is empty.");
            return;
        }

        Node temp = head;

        // If the node to be deleted is the head node
        if (temp != null && temp.data == data) {
            head = temp.next; // Move head to the next node
            if (head != null) {
                head.prev = null; // Set the previous pointer of the new head to null
            }
            temp = null;
            return;
        }

        // Search for the node to be deleted
        while (temp != null && temp.data != data) {
            temp = temp.next;
        }

        // If the node was not found
        if (temp == null) {
            System.out.println("Node with value " + data + " not found.");
            return;
        }

        // Remove node from the list
        if (temp.next != null) {
            temp.next.prev = temp.prev;
        }
        if (temp.prev != null) {
            temp.prev.next = temp.next;
        }

        temp = null; // Delete the node
    }

    // Method to print the list from the beginning to the end
    public void printForward() {
        if (head == null) {
            System.out.println("List is empty.");
            return;
        }

        Node temp = head;
        while (temp != null) {
            System.out.print(temp.data + " ");
            temp = temp.next;
        }
        System.out.println();
    }

    // Method to print the list from the end to the beginning
    public void printBackward() {
        if (head == null) {
            System.out.println("List is empty.");
            return;
        }

        // Go to the last node
        Node temp = head;
        while (temp.next != null) {
            temp = temp.next;
        }

        // Traverse backward
        while (temp != null) {
            System.out.print(temp.data + " ");
            temp = temp.prev;
        }
        System.out.println();
    }
}

public class DoublyLinkedListExample {
    public static void main(String[] args) {
        // Create a new doubly linked list
        DoublyLinkedList list = new DoublyLinkedList();

        // Append nodes to the list
        list.append(10);
        list.append(20);
        list.append(30);

        // Print the list in forward direction
        System.out.println("List in forward direction:");
        list.printForward();

        // Print the list in backward direction
        System.out.println("List in backward direction:");
        list.printBackward();

        // Prepend a node to the list
        list.prepend(5);

        // Print the list again in forward direction
        System.out.println("List after prepending 5:");
        list.printForward();

        // Delete a node
        list.delete(20);

        // Print the list after deletion
        System.out.println("List after deleting 20:");
        list.printForward();

        // Try deleting a node that doesn't exist
        list.delete(100);
    }
}
